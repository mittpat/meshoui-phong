#version 450 core

#ifdef COMPILING_VERTEX
layout(location=0) out VertexData
{
    vec3 vertex;
    vec3 normal;
    vec2 texcoord;
    mat3 TBN;
} outData;
layout(location = 0) in vec3 vertexPosition;
layout(location = 1) in vec2 vertexTexcoord;
layout(location = 2) in vec3 vertexNormal;
layout(location = 3) in vec3 vertexTangent;
layout(location = 4) in vec3 vertexBitangent;
layout(push_constant) uniform uPushConstant
{
    mat4 uniformModel;
    mat4 uniformView;
    mat4 uniformProjection;
} pc;

void main()
{
    outData.vertex = vec3(pc.uniformModel * vec4(vertexPosition, 1.0));
    outData.normal = normalize(mat3(transpose(inverse(pc.uniformModel))) * vertexNormal);
    outData.texcoord = vertexTexcoord;
    vec3 T = normalize(vec3(mat3(pc.uniformModel) * vertexTangent));
    vec3 B = normalize(vec3(mat3(pc.uniformModel) * vertexBitangent));
    vec3 N = normalize(vec3(mat3(pc.uniformModel) * vertexNormal));
    outData.TBN = mat3(T, B, N);
    gl_Position = pc.uniformProjection * pc.uniformView * pc.uniformModel * vec4(vertexPosition, 1.0);
}
#endif

#ifdef COMPILING_FRAGMENT

/// RAY
struct MoRay
{
    vec3 origin;
    vec3 direction;
    vec3 oneOverDirection;
};

void moInitRay(inout MoRay self, in vec3 origin, in vec3 direction)
{
    self.origin = origin;
    self.direction = direction;
    self.oneOverDirection = 1.0 / self.direction;
}

/// BBOX
struct MoBBox
{
    vec3 min;
    vec3 max;
    vec3 extent;
};

void moInitBBox(inout MoBBox self, in vec3 _min, in vec3 _max)
{
    self.min = _min;
    self.max = _max;
    self.extent = self.max - self.min;
}

void moInitBBox(inout MoBBox self, in vec3 point)
{
    self.min = point;
    self.max = point;
    self.extent = self.max - self.min;
}

uint moLongestSide(in MoBBox self)
{
    uint dimension = 0;
    if (self.extent.y > self.extent.x)
    {
        dimension = 1;
        if (self.extent.z > self.extent.y)
        {
            dimension = 2;
        }
    }
    else if (self.extent.z > self.extent.x)
    {
        dimension = 2;
    }
    return dimension;
}

bool moIntersect(in MoBBox self, in MoRay ray, out float t_near, out float t_far)
{
    float tx1 = (self.min.x - ray.origin.x) * ray.oneOverDirection.x;
    float tx2 = (self.max.x - ray.origin.x) * ray.oneOverDirection.x;

    t_near = min(tx1, tx2);
    t_far = max(tx1, tx2);

    float ty1 = (self.min.y - ray.origin.y) * ray.oneOverDirection.y;
    float ty2 = (self.max.y - ray.origin.y) * ray.oneOverDirection.y;

    t_near = max(t_near, min(ty1, ty2));
    t_far = min(t_far, max(ty1, ty2));

    float tz1 = (self.min.z - ray.origin.z) * ray.oneOverDirection.z;
    float tz2 = (self.max.z - ray.origin.z) * ray.oneOverDirection.z;

    t_near = max(t_near, min(tz1, tz2));
    t_far = min(t_far, max(tz1, tz2));

    return t_far >= t_near;
}

void moExpandToInclude(inout MoBBox self, in vec3 point)
{
    self.min.x = min(self.min.x, point.x);
    self.min.y = min(self.min.y, point.y);
    self.min.z = min(self.min.z, point.z);
    self.max.x = max(self.max.x, point.x);
    self.max.y = max(self.max.y, point.y);
    self.max.z = max(self.max.z, point.z);
    self.extent = self.max - self.min;
}

void moExpandToInclude(inout MoBBox self, in MoBBox box)
{
    self.min.x = min(self.min.x, box.min.x);
    self.min.y = min(self.min.y, box.min.y);
    self.min.z = min(self.min.z, box.min.z);
    self.max.x = max(self.max.x, box.max.x);
    self.max.y = max(self.max.y, box.max.y);
    self.max.z = max(self.max.z, box.max.z);
    self.extent = self.max - self.min;
}

/// TRIANGLE
struct MoTriangle
{
    vec3 v0, v1, v2;
    vec2 uv0, uv1, uv2;
    vec3 n0, n1, n2;
};

MoBBox moGetBoundingBox(in MoTriangle self)
{
    MoBBox bb;
    moInitBBox(bb, self.v0);
    moExpandToInclude(bb, self.v1);
    moExpandToInclude(bb, self.v2);
    return bb;
}

vec3 moGetCentroid(in MoTriangle self)
{
    return (self.v0 + self.v1 + self.v2) / 3.0f;
}

MoBBox moGetUVBoundingBox(in MoTriangle self)
{
    MoBBox bb;
    moInitBBox(bb, vec3(self.uv0, 0.f));
    moExpandToInclude(bb, vec3(self.uv1, 0.f));
    moExpandToInclude(bb, vec3(self.uv2, 0.f));
    return bb;
}

vec3 moGetUVCentroid(in MoTriangle self)
{
    return vec3((self.uv0 + self.uv1 + self.uv2) / 3.0f, 0.f);
}

vec3 moGetUVBarycentric(in MoTriangle self, in vec2 uv)
{
    vec4 x = vec4(uv.x, self.uv0.x, self.uv1.x, self.uv2.x);
    vec4 y = vec4(uv.y, self.uv0.y, self.uv1.y, self.uv2.y);

    float d = (y[2] - y[3]) * (x[1] - x[3]) + (x[3] - x[2]) * (y[1] - y[3]);
    float l1 = ((y[2] - y[3]) * (x[0] - x[3]) + (x[3] - x[2]) * (y[0] - y[3]))
            / d;
    float l2 = ((y[3] - y[1]) * (x[0] - x[3]) + (x[1] - x[3]) * (y[0] - y[3]))
            / d;
    float l3 = 1 - l1 - l2;

#if 0
    vec2 test = l1 * self.uv0 + l2 * self.uv1 + l3 * self.uv2;
#endif

    return vec3(l1, l2, l3);
}

void moGetSurface(in MoTriangle self, in vec3 barycentricCoordinates, out vec3 point, out vec3 normal)
{
    point = self.v0 * barycentricCoordinates[0]
          + self.v1 * barycentricCoordinates[1]
          + self.v2 * barycentricCoordinates[2];

    normal = self.n0 * barycentricCoordinates[0]
           + self.n1 * barycentricCoordinates[1]
           + self.n2 * barycentricCoordinates[2];
    normal = normalize(normal);
}

bool moRayTriangleIntersect(in MoTriangle self, in MoRay ray, out float t, out float u, out float v)
{
    float EPSILON = 0.0000001f;
    vec3 vertex0 = self.v0;
    vec3 vertex1 = self.v1;
    vec3 vertex2 = self.v2;
    vec3 edge1 = vertex1 - vertex0;
    vec3 edge2 = vertex2 - vertex0;
    vec3 h = cross(ray.direction, edge2);
    float a = dot(edge1, h);
    if (a > -EPSILON && a < EPSILON)
    {
        // This ray is parallel to this triangle.
        return false;
    }

    float f = 1.0/a;
    vec3 s = ray.origin - vertex0;
    u = f * dot(s, h);
    if (u < 0.0 || u > 1.0)
    {
        return false;
    }

    vec3 q = cross(s, edge1);
    v = f * dot(ray.direction, q);
    if (v < 0.0 || u + v > 1.0)
    {
        return false;
    }

    // At this stage we can compute t to find out where the intersection point is on the line.
    t = f * dot(edge2, q);
    if (t > EPSILON)
    {
        // ray intersection
        return true;
    }

    // This means that there is a line intersection but not a ray intersection.
    return false;
}

/// BVH
struct MoBVHSplitNode
{
    uint start;
    uint count;
    uint offset;
    MoBBox boundingBox;
};

struct MoBVHWorkingSet
{
    uint index;
    float distance;
};

struct MoIntersectResult
{
    MoTriangle triangle;
    vec3 barycentric;
    float distance;
};

void swap(inout float left, inout float right)
{
    float temp = left;
    left = right;
    right = temp;
}

void swap(inout uint left, inout uint right)
{
    uint temp = left;
    left = right;
    right = temp;
}

layout(std430, set = 2, binding = 0) buffer BVHSplitNodes
{
    MoBVHSplitNode pSplitNodes[];
} inBVHSplitNodes;
layout(std430, set = 2, binding = 1) buffer BVHObjects
{
    MoTriangle pObjects[];
} inBVHObjects;

layout(std430, set = 2, binding = 2) buffer BVHSplitNodesUV
{
    MoBVHSplitNode pSplitNodes[];
} inBVHSplitNodesUV;
layout(std430, set = 2, binding = 3) buffer BVHObjectsUV
{
    MoTriangle pObjects[];
} inBVHObjectsUV;

bool moIntersectTriangleBVH(in MoRay ray, out MoIntersectResult result)
{
    result.distance = 1.0 / 0.0;
    float bbhits[4];
    uint closer, other;

    // Working set
    MoBVHWorkingSet traversal[64];
    int stackPtr = 0;

    traversal[stackPtr].index = 0;
    traversal[stackPtr].distance = -1.0 / 0.0;

    while (stackPtr >= 0)
    {
        uint index = traversal[stackPtr].index;
        float near = traversal[stackPtr].distance;
        stackPtr--;
        MoBVHSplitNode node = inBVHSplitNodes.pSplitNodes[index];

        if (near > result.distance)
        {
            continue;
        }

        if (node.offset == 0)
        {
            for (uint i = 0; i < node.count; ++i)
            {
                float currentDistance = 1.0 / 0.0;
                float u, v;
                MoTriangle triangle = inBVHObjects.pObjects[node.start + i];
                if (moRayTriangleIntersect(triangle, ray, currentDistance, u, v))
                {
                    if (currentDistance <= 0.0)
                    {
                        result.triangle = triangle;
                        result.barycentric = vec3(1.f - u - v, u, v);
                        result.distance = currentDistance;

                        return true;
                    }
                    if (currentDistance < result.distance)
                    {
                        result.triangle = triangle;
                        result.barycentric = vec3(1.f - u - v, u, v);
                        result.distance = currentDistance;
                    }
                }
            }
        }
        else
        {
            bool hitLeft = moIntersect(inBVHSplitNodes.pSplitNodes[index + 1].boundingBox, ray, bbhits[0], bbhits[1]);
            bool hitRight = moIntersect(inBVHSplitNodes.pSplitNodes[index + node.offset].boundingBox, ray, bbhits[2], bbhits[3]);

            if (hitLeft && hitRight)
            {
                closer = index + 1;
                other = index + node.offset;

                if (bbhits[2] < bbhits[0])
                {
                    swap(bbhits[0], bbhits[2]);
                    swap(bbhits[1], bbhits[3]);
                    swap(closer, other);
                }

                ++stackPtr;
                traversal[stackPtr] = MoBVHWorkingSet(other, bbhits[2]);
                ++stackPtr;
                traversal[stackPtr] = MoBVHWorkingSet(closer, bbhits[0]);
            }
            else if (hitLeft)
            {
                ++stackPtr;
                traversal[stackPtr] = MoBVHWorkingSet(index + 1, bbhits[0]);
            }
            else if (hitRight)
            {
                ++stackPtr;
                traversal[stackPtr] = MoBVHWorkingSet(index + node.offset, bbhits[2]);
            }
        }
    }

    return result.distance < (1.0 / 0.0);
}

bool moTexcoordInTriangleUV(in MoTriangle self, in vec2 tex)
{
    float s = self.uv0.y * self.uv2.x - self.uv0.x * self.uv2.y + (self.uv2.y - self.uv0.y) * tex.x + (self.uv0.x - self.uv2.x) * tex.y;
    float t = self.uv0.x * self.uv1.y - self.uv0.y * self.uv1.x + (self.uv0.y - self.uv1.y) * tex.x + (self.uv1.x - self.uv0.x) * tex.y;

    if ((s < 0) != (t < 0))
        return false;

    float area = -self.uv1.y * self.uv2.x + self.uv0.y * (self.uv2.x - self.uv1.x) + self.uv0.x * (self.uv1.y - self.uv2.y) + self.uv1.x * self.uv2.y;

    return area < 0 ?
            (s <= 0 && s + t >= area) :
            (s >= 0 && s + t <= area);
}

bool moIntersectUVTriangleBVH(in MoRay ray, out MoIntersectResult result)
{
    result.distance = 1.0 / 0.0;
    float bbhits[4];
    uint closer, other;

    // Working set
    MoBVHWorkingSet traversal[64];
    int stackPtr = 0;

    traversal[stackPtr].index = 0;
    traversal[stackPtr].distance = -1.0 / 0.0;

    while (stackPtr >= 0)
    {
        uint index = traversal[stackPtr].index;
        float near = traversal[stackPtr].distance;
        stackPtr--;
        MoBVHSplitNode node = inBVHSplitNodesUV.pSplitNodes[index];

        if (near > result.distance)
        {
            continue;
        }

        if (node.offset == 0)
        {
            for (uint i = 0; i < node.count; ++i)
            {
                float currentDistance = 1.0 / 0.0;
                MoTriangle triangle = inBVHObjectsUV.pObjects[node.start + i];
                if (moTexcoordInTriangleUV(triangle, ray.origin.xy))
                {
                    currentDistance = 0.0;
                }
                if (currentDistance <= 0.0)
                {
                    result.triangle = triangle;
                    result.distance = currentDistance;

                    return true;
                }
                if (currentDistance < result.distance)
                {
                    result.triangle = triangle;
                    result.distance = currentDistance;
                }
            }
        }
        else
        {
            bool hitLeft = moIntersect(inBVHSplitNodesUV.pSplitNodes[index + 1].boundingBox, ray, bbhits[0], bbhits[1]);
            bool hitRight = moIntersect(inBVHSplitNodesUV.pSplitNodes[index + node.offset].boundingBox, ray, bbhits[2], bbhits[3]);

            if (hitLeft && hitRight)
            {
                closer = index + 1;
                other = index + node.offset;

                if (bbhits[2] < bbhits[0])
                {
                    swap(bbhits[0], bbhits[2]);
                    swap(bbhits[1], bbhits[3]);
                    swap(closer, other);
                }

                ++stackPtr;
                traversal[stackPtr] = MoBVHWorkingSet(other, bbhits[2]);
                ++stackPtr;
                traversal[stackPtr] = MoBVHWorkingSet(closer, bbhits[0]);
            }
            else if (hitLeft)
            {
                ++stackPtr;
                traversal[stackPtr] = MoBVHWorkingSet(index + 1, bbhits[0]);
            }
            else if (hitRight)
            {
                ++stackPtr;
                traversal[stackPtr] = MoBVHWorkingSet(index + node.offset, bbhits[2]);
            }
        }
    }

    return result.distance < (1.0 / 0.0);
}

/// ORIGINAL PHONG
layout(location = 0) out vec4 fragment;
layout(location = 0) in VertexData
{
    vec3 vertex;
    vec3 normal;
    vec2 texcoord;
    mat3 TBN;
} inData;

const float MultiSampleOffset = 1.0/1024.0;
const vec4 DefaultColor = vec4(0.5, 0.5, 0.5, 1.0);
const vec3 MultiTexels[] = {vec3(vec2(0.0), -1.0),
                            vec3(vec2(0.0) + vec2( MultiSampleOffset,  MultiSampleOffset), -1.0),
                            vec3(vec2(0.0) + vec2(-MultiSampleOffset, -MultiSampleOffset), -1.0),
                            vec3(vec2(0.0) + vec2( MultiSampleOffset, -MultiSampleOffset), -1.0),
                            vec3(vec2(0.0) + vec2(-MultiSampleOffset,  MultiSampleOffset), -1.0)};
const float SurfaceBias = 0.01f;

const vec3 Samples[] = {
    vec3(0.811584,-0.729046,0.629447),
    vec3(0.937736,-0.746026,0.670017),
    vec3(0.264719,-0.557932,0.826752),
    vec3(0.992923,0.915014,0.985763),
    vec3(-0.684774,0.93539,0.929777),
    vec3(0.962219,0.941186,0.451678),
    vec3(-0.0292487,-0.780276,0.914334),
    vec3(-0.156477,-0.990433,-0.716227),
    vec3(0.279527,0.831471,-0.775071),
    vec3(0.918985,0.756861,0.584415),
    vec3(0.698259,-0.277412,-0.928577),
    vec3(0.362719,0.867986,-0.576151),
    vec3(-0.396174,-0.657627,-0.65227),
    vec3(-0.936334,0.59456,0.412092),
    vec3(-0.805736,-0.701772,-0.907657),
    vec3(0.643807,0.646916,0.988137),
    vec3(-0.0188219,0.900444,0.5275)};
#if 0
    vec3(0.5904,-0.897567,0.531034),
    vec3(-0.182538,-0.626255,-0.927117),
    vec3(0.509373,0.84175,0.41873),
    vec3(0.310196,-0.994363,0.359405),
    vec3(0.147509,0.919488,0.547834),
    vec3(-0.964452,-0.552376,0.616351),
    vec3(0.880148,0.0119141,0.641682),
    vec3(-0.539688,-0.701412,0.523462),
    vec3(0.681435,0.619469,-0.484984),
    vec3(-0.335103,-0.491436,0.977043),
    vec3(-0.565524,0.858527,-0.972922),
    vec3(-0.606809,0.814729,-0.300032),
    vec3(0.910035,-0.497832,0.696936),
    vec3(-0.864809,-0.296681,0.974919),
    vec3(-0.428322,0.390466,0.834387),
    vec3(-0.8921,-0.191583,-0.848291),
    vec3(0.868021,-0.28731,0.558334),
    vec3(-0.691123,-0.740188,0.929933),
    vec3(0.453909,-0.976196,-0.225408),
    vec3(-0.127765,0.588569,0.854986),
    vec3(-0.760906,-0.668703,0.24072),
    vec3(0.440987,-0.0989168,0.976759),
    vec3(-0.542046,0.825155,-0.832357),
    vec3(-0.843649,-0.104831,0.992269),
    vec3(0.923796,-0.00291163,-0.786694),
    vec3(-0.931365,-0.990732,0.959851),
    vec3(0.634606,0.954004,0.549821),
    vec3(-0.909881,-0.480259,0.71175),
    vec3(-0.734008,0.821295,0.499882),
    vec3(-0.472394,0.964721,-0.636306),
    vec3(-0.434653,-0.708922,-0.80929),
    vec3(0.738584,0.604223,-0.727863),
    vec3(-0.71009,-0.983812,0.0997204),
    vec3(-0.919058,-0.520168,0.524843),
    vec3(-0.632184,-0.494088,-0.753362),
    vec3(-0.900691,0.963446,-0.165466),
    vec3(-0.396345,0.805432,0.646911),
    vec3(-0.0182718,-0.904111,0.889574),
    vec3(0.800108,0.775452,-0.324561),
    vec3(-0.933463,-0.261506,-0.312321),
    vec3(0.560504,-0.674256,-0.777595),
    vec3(0.884101,-0.019397,-0.736053),
    vec3(0.303937,0.912269,0.909887),
    vec3(-0.880441,0.515007,0.150417),
    vec3(0.642388,-0.893695,-0.293683),
    vec3(-0.190037,-0.969193,-0.354979),
    vec3(-0.66202,0.816867,-0.913952),
    vec3(0.858772,-0.241162,-0.837748),
    vec3(0.89785,0.0656512,-0.600254),
    vec3(0.878003,0.98022,-0.298546),
    vec3(-0.966959,0.751886,-0.519848),
    vec3(0.800366,-0.0581533,-0.963098),
    vec3(0.688618,-0.611009,-0.539024),
    vec3(-0.658584,-0.704342,-0.548156),
    vec3(0.289101,0.846759,-0.820354),
    vec3(-0.12226,-0.290724,0.959497),
    vec3(0.205686,-0.915892,-0.475577),
    vec3(-0.765165,0.662429,-0.556507),
    vec3(-0.475036,0.987069,-0.828968),
    vec3(0.525863,0.602029,-0.636854),
    vec3(0.857708,-0.468159,-0.941559),
    vec3(-0.798523,0.460662,-0.511723),
    vec3(0.937281,-0.525433,-0.436745),
    vec3(0.926177,-0.572455,-0.0823023),
    vec3(0.975964,-0.696852,-0.265127),
    vec3(0.767937,-0.924522,0.538486),
    vec3(0.826574,0.918443,0.770336),
    vec3(0.165693,0.592368,-0.963867),
    vec3(-0.476258,0.533708,-0.802575),
    vec3(-0.974922,-0.0116521,-0.996804),
    vec3(-0.23049,0.807441,-0.802602),
    vec3(-0.86911,0.397492,0.439942),
    vec3(-0.938918,0.0277184,-0.60438),
    vec3(-0.535199,0.957361,0.925995),
    vec3(0.363944,0.904944,-0.880762),
    vec3(0.74361,-0.915138,0.069442),
    vec3(0.0432997,0.869205,-0.857109),
    vec3(0.635094,-0.868951,0.636297),
    vec3(0.297983,-0.715566,0.945949),
    vec3(-0.733658,0.813888,-0.83306),
    vec3(0.427808,-0.653223,-0.846992),
    vec3(-0.201484,-0.444672,-0.879058),
    vec3(0.817873,0.0537517,0.716199),
    vec3(0.632234,-0.969026,-0.281351),
    vec3(-0.665663,-0.413224,0.968127),
    vec3(-0.0144208,-0.787567,-0.655764),
    vec3(-0.215062,0.840664,0.756101),
    vec3(0.475716,0.893155,-0.894646),
    vec3(0.943755,-0.461761,-0.666603),
    vec3(-0.737556,0.885474,0.196738),
    vec3(0.998161,0.763451,-0.743971),
    vec3(0.1224,-0.874914,-0.934798),
    vec3(-0.820094,0.763733,-0.736877),
    vec3(-0.619133,-0.983371,0.338351),
    vec3(0.165973,-0.963576,-0.230762),
    vec3(0.99295,-0.469438,-0.0544618),
    vec3(0.965327,0.064195,0.648753),
    vec3(0.545802,0.460498,0.798872),
    vec3(-0.250375,-0.784462,0.814217),
    vec3(0.759308,0.696178,0.812616),
    vec3(-0.902034,-0.954975,0.17353),
    vec3(0.552908,-0.811541,-0.210545),
    vec3(-0.360801,-0.407665,-0.862388),
    vec3(-0.184762,0.989011,0.308891),
    vec3(0.937299,-0.508851,0.436718),
    vec3(-0.86423,-0.818353,0.396294),
    vec3(-0.692687,-0.86172,-0.467057),
    vec3(-0.811118,-0.0851513,-0.738389),
    vec3(0.0361042,-0.759237,0.750743),
    vec3(0.512563,0.887245,0.939674),
    vec3(0.915388,-0.463647,0.275418),
    vec3(0.870429,-0.49042,0.80895),
    vec3(0.335665,0.836553,-0.55192),
    vec3(0.204341,-0.538736,-0.986569),
    vec3(0.968905,-0.226458,0.423762),
    vec3(-0.997698,0.310426,0.831982),
    vec3(-0.0781673,-0.993998,-0.151302),
    vec3(0.941888,0.540319,-0.107152),
    vec3(-0.648251,0.612902,-0.928475),
    vec3(0.834849,-0.336045,-0.514301),
    vec3(0.714145,-0.461877,0.603526),
    vec3(-0.622676,-0.970217,0.531),
    vec3(0.152419,-0.827566,-0.817773),
    vec3(0.827439,0.366727,0.849752),
    vec3(0.899429,0.288886,0.800044),
    vec3(0.555588,0.271573,-0.983351),
    vec3(-0.58213,-0.948082,0.890348),
    vec3(-0.751455,0.214608,-0.777841),
    vec3(-0.588089,0.324019,-0.862523),
    vec3(-0.861475,0.665834,-0.977615),
    vec3(0.985485,0.164498,-0.37554),
    vec3(-0.565723,0.879659,0.689713),
    vec3(0.965336,0.278634,0.424385),
    vec3(0.90519,0.987409,0.664136),
    vec3(-0.788403,0.53474,-0.562647),
    vec3(-0.0886725,-0.780605,0.723938),
    vec3(0.865707,-0.18069,0.543961),
    vec3(-0.285872,0.945482,0.519023),
    vec3(-0.722252,0.543572,-0.615943),
    vec3(0.692323,0.392533,0.963081),
    vec3(0.0508088,0.669243,-0.81236),
    vec3(-0.0302933,0.951123,0.72228),
    vec3(0.738921,-0.213087,0.685179),
    vec3(0.482516,-0.849003,0.342862),
    vec3(-0.911092,0.902529,-0.475709),
    vec3(0.838771,0.509866,-0.468225),
    vec3(0.408095,0.887185,0.366832),
    vec3(-0.338284,-0.694069,-0.960845),
    vec3(-0.0100504,0.643442,-0.851714),
    vec3(-0.988053,0.617028,0.806482),
    vec3(0.898608,0.98064,0.580814),
    vec3(-0.546802,0.667001,0.922842),
    vec3(-0.665493,0.848483,0.537709),
    vec3(-0.136511,0.723961,0.752492),
    vec3(0.675231,0.768562,0.124205),
    vec3(-0.690495,-0.703382,0.176052),
    vec3(0.991187,-0.600274,0.278556),
    vec3(-0.943223,0.651168,-0.120963),
    vec3(-0.362952,-0.833698,0.579926),
    vec3(-0.776588,0.47329,-0.820099),
    vec3(-0.476345,-0.727415,-0.619678),
    vec3(-0.807026,-0.890052,-0.624338),
    vec3(-0.950532,0.859218,-0.659347),
    vec3(-0.71593,0.630794,-0.510343),
    vec3(0.977823,-0.689116,0.758028),
    vec3(-0.932855,-0.998955,-0.393979),
    vec3(-0.113256,0.9799,0.566247),
    vec3(0.902793,0.602695,-0.428431),
    vec3(-0.452177,0.801705,-0.8117),
    vec3(0.803313,0.321889,-0.629804),
    vec3(0.781504,-0.951076,0.459504),
    vec3(0.565031,0.964606,-0.471247),
    vec3(-0.806934,0.856626,0.112431),
    vec3(-0.966034,0.853574,0.160181),
    vec3(-0.920194,-0.758281,-0.203217),
    vec3(-0.740933,0.689711,-0.17357),
    vec3(0.696591,0.259767,-0.889187),
    vec3(-0.02086,-0.557988,-0.900935),
    vec3(0.951664,-0.614979,0.288729),
    vec3(-0.589012,0.898685,-0.753833),
    vec3(-0.914695,0.371468,-0.621856),
    vec3(0.0771934,0.98955,-0.436266),
    vec3(0.979766,-0.109634,-0.274168),
    vec3(-0.459411,0.703391,0.747855),
    vec3(0.894789,-0.583077,-0.656794),
    vec3(0.895866,0.436733,-0.588049),
    vec3(0.901749,-0.835858,0.671835),
    vec3(-0.715918,-0.872037,-0.788581),
    vec3(-0.773595,-0.895844,-0.6632),
    vec3(0.457323,-0.694853,0.862403),
    vec3(0.720881,-0.944071,-0.873191),
    vec3(-0.802912,0.86881,-0.0999355),
    vec3(0.717878,0.832036,0.968797),
    vec3(-0.938221,-0.568393,-0.732138),
    vec3(-0.882603,0.878283,-0.897015),
    vec3(-0.596866,-0.949544,-0.181784),
    vec3(0.118065,-0.949001,0.684413),
    vec3(0.352794,0.7082,-0.867119),
    vec3(-0.814579,-0.338342,-0.64703),
    vec3(-0.76369,-0.880771,0.796972),
    vec3(0.431972,0.976836,-0.426187),
    vec3(-0.190894,0.998983,0.810249),
    vec3(-0.156601,-0.799557,-0.714778),
    vec3(-0.28073,0.737925,-0.643766),
    vec3(0.067385,-0.886591,0.994083),
    vec3(-0.913936,-0.648662,-0.335467),
    vec3(0.810307,0.713031,-0.582107),
    vec3(0.472535,-0.73687,0.491092),
    vec3(0.904286,0.123723,-0.818957),
    vec3(-0.515027,-0.617027,-0.857094),
    vec3(-0.215451,-0.892491,-0.977951),
    vec3(-0.973434,0.813347,-0.116556),
    vec3(0.417847,0.794383,0.974566),
    vec3(-0.813259,0.275906,-0.606684),
    vec3(-0.796661,0.761496,-0.0878847),
    vec3(0.44081,0.990779,-0.961095),
    vec3(0.277557,-0.87591,-0.886978),
    vec3(-0.907297,-0.407057,-0.403512),
    vec3(-0.733327,-0.820217,0.00682068),
    vec3(0.554481,0.426251,-0.838275),
    vec3(0.807098,0.810269,0.8502),
    vec3(-0.903105,-0.141492,-0.979327),
    vec3(0.562754,0.838235,0.414507),
    vec3(0.560351,-0.204025,-0.876819),
    vec3(0.482508,-0.997017,0.215732),
    vec3(-0.596005,-0.790374,-0.210026),
    vec3(-0.854229,-0.744086,-0.897336),
    vec3(0.886016,-0.743577,0.596702),
    vec3(0.453739,0.367431,0.957373),
    vec3(0.445449,-0.553202,-0.735834),
    vec3(0.677524,-0.342372,0.818731),
    vec3(0.755783,0.166371,0.90214),
    vec3(-0.154181,0.469915,0.941427),
    vec3(0.733861,0.674553,0.941197),
    vec3(0.346853,-0.827531,-0.813361),
    vec3(-0.826667,-0.585019,-0.587944),
    vec3(-0.223457,0.956975,-0.588651),
    vec3(0.836949,0.103557,-0.66782),
    vec3(-0.98016,-0.798787,-0.987973),
    vec3(-0.189369,0.670517,-0.817003),
    vec3(-0.845593,-0.790308,0.559478),
    vec3(0.568856,-0.41716,-0.775432),
    vec3(0.928845,0.842342,0.207067),
    vec3(0.516199,-0.830732,0.389504),
    vec3(0.710499,0.595661,0.999723),
    vec3(-0.925531,0.660683,-0.454122),
    vec3(0.291237,0.34659,0.975662),
    vec3(0.934346,-0.739697,0.187517),
    vec3(-0.984359,-0.843245,-0.815295),
    vec3(0.445845,-0.844173,0.311146),
    vec3(-0.802812,-0.264279,-0.731393),
    vec3(0.19725,-0.715945,-0.764217),
    vec3(-0.607502,-0.966835,-0.663497),
    vec3(-0.589684,-0.497916,-0.826216),
    vec3(-0.575938,0.706278,-0.631133),
    vec3(0.705871,-0.845306,0.901228),
    vec3(0.41343,0.960601,0.827601),
    vec3(-0.667593,0.837248,-0.373142),
    vec3(-0.659136,0.0752122,0.975869),
    vec3(-0.664435,-0.484415,0.826277),
    vec3(-0.85201,-0.962223,-0.206401),
    vec3(0.682753,0.368192,0.713),
    vec3(0.96567,0.576374,-0.195223),
    vec3(0.238029,0.742222,-0.797356),
    vec3(-0.40155,0.95983,-0.329377),
    vec3(-0.951132,0.928931,-0.750255),
    vec3(0.969848,-0.419629,-0.759607),
    vec3(-0.0842273,0.529287,0.871462),
    vec3(-0.88823,-0.519043,-0.175635),
    vec3(-0.724148,-0.802963,-0.25097),
    vec3(-0.649981,0.458779,0.647149),
    vec3(0.788779,-0.872513,0.331974),
    vec3(-0.790684,0.0331165,0.814771),
    vec3(-0.692819,-0.801497,0.405405),
    vec3(-0.577427,-0.926874,-0.0752157),
    vec3(-0.0213578,-0.759626,-0.784551),
    vec3(-0.958928,-0.860736,-0.489227),
    vec3(-0.730162,0.847351,-0.965317),
    vec3(0.865227,0.79308,0.3074),
    vec3(0.589316,0.905771,0.842195),
    vec3(-0.871626,-0.297726,-0.542661),
    vec3(0.127567,0.534659,-0.926644),
    vec3(-0.324776,0.63228,0.723987),
    vec3(0.0112733,-0.963216,0.704528),
    vec3(-0.219403,0.271323,-0.991828),
    vec3(-0.112072,0.999883,0.901789),
    vec3(0.256086,-0.879962,-0.599871),
    vec3(0.262378,0.838965,0.7335),
    vec3(0.655684,-0.289853,0.705565),
    vec3(-0.551657,0.847222,0.994007),
    vec3(-0.0585089,-0.715626,0.984092),
    vec3(-0.157776,0.350672,-0.94973),
    vec3(0.142206,-0.631799,0.86666),
    vec3(0.830928,0.68312,-0.359908),
    vec3(0.142052,0.964216,0.468459),
    vec3(-0.960446,-0.64629,-0.44059),
    vec3(-0.469356,-0.327403,0.914768),
    vec3(-0.777469,0.849162,0.772295),
    vec3(-0.76125,-0.824999,0.0496497),
    vec3(-0.422026,-0.909898,-0.374694),
    vec3(0.862602,-0.9567,-0.546583),
    vec3(0.601117,-0.910906,0.82114),
    vec3(0.565991,0.491695,0.95295),
    vec3(-0.793804,0.234558,-0.572075),
    vec3(0.972208,-0.193815,0.608899),
    vec3(-0.153107,-0.940016,0.836879),
    vec3(-0.866107,-0.11451,0.97829),
    vec3(0.638128,0.878797,0.400494),
    vec3(0.367677,-0.469278,-0.963645),
    vec3(0.414974,0.567473,-0.888589),
    vec3(0.984104,0.79801,0.934611),
    vec3(-0.724262,-0.915525,0.251875),
    vec3(-0.874359,-0.564397,0.846526),
    vec3(-0.91636,-0.237021,-0.635718),
    vec3(-0.121679,-0.786117,-0.744562),
    vec3(0.879322,-0.982795,0.232887),
    vec3(0.774028,-0.291089,0.748007),
    vec3(0.976605,-0.19472,0.353289),
    vec3(-0.901081,-0.511669,-0.257537),
    vec3(-0.834815,0.603937,0.0236398),
    vec3(-0.290931,0.983162,0.992312),
    vec3(-0.0522227,0.942518,0.818754),
    vec3(0.899816,0.565744,-0.78243),
    vec3(-0.980395,-0.20384,0.387575),
    vec3(-0.105867,0.686427,-0.943938),
    vec3(0.541908,-0.588166,0.844664),
    vec3(0.880819,-0.91468,0.78173),
    vec3(-0.461891,0.734173,-0.551446),
    vec3(0.659287,0.807188,-0.645752),
    vec3(-0.784222,0.366595,0.868957),
    vec3(-0.801821,0.137566,0.791783),
    vec3(0.395611,-0.911669,0.297218),
    vec3(0.906196,-0.579709,-0.945784),
    vec3(0.812729,-0.727266,0.020305),
    vec3(-0.218291,0.742786,-0.796932),
    vec3(-0.987261,-0.890767,0.777866),
    vec3(0.308824,0.995121,0.639602),
    vec3(-0.498338,-0.750452,-0.731571),
    vec3(-0.786608,-0.172198,-0.721704),
    vec3(-0.991957,0.945468,-0.411133),
    vec3(0.675606,-0.72369,-0.34449),
    vec3(-0.936155,0.301795,0.908349),
    vec3(-0.904891,-0.353164,0.320876),
    vec3(-0.436985,0.973833,0.712365),
    vec3(-0.746544,0.613519,0.697622),
    vec3(0.996082,0.754097,0.570222),
    vec3(0.918626,0.927061,-0.945401),
    vec3(0.945917,-0.329014,-0.915404),
    vec3(0.211875,-0.621586,-0.905958),
    vec3(0.172879,0.948114,0.334241),
    vec3(0.726699,0.622302,-0.58221),
    vec3(-0.832253,0.731075,-0.961485),
    vec3(-0.959664,0.949603,0.44224),
    vec3(0.768306,-0.34165,-0.756683),
    vec3(-0.20196,0.567689,0.860081),
    vec3(-0.770554,0.787265,-0.79598),
    vec3(0.487209,-0.907617,-0.0660737),
    vec3(0.440332,-0.816557,-0.609046),
    vec3(0.164866,0.940937,0.755598),
    vec3(0.801572,-0.858631,-0.58839),
    vec3(0.600744,0.470233,0.845489),
    vec3(0.969553,0.818205,0.0873264),
    vec3(-0.701667,0.431356,-0.77083),
    vec3(-0.861288,-0.0587506,-0.739016),
    vec3(0.913887,0.498037,0.193487),
    vec3(0.644461,-0.384509,0.711142),
    vec3(-0.956888,0.445944,-0.732992),
    vec3(0.878819,-0.711044,-0.398362),
    vec3(-0.397525,0.887463,0.565655),
    vec3(-0.106938,-0.958791,-0.948285),
    vec3(0.492805,0.874269,-0.129078),
    vec3(0.698171,-0.981257,0.659066),
    vec3(-0.436954,-0.254932,0.994553),
    vec3(0.745105,0.940942,0.186369),
    vec3(0.956338,0.867003,0.575137),
    vec3(0.6219,0.199112,0.867451),
    vec3(-0.837506,0.943572,0.419079),
    vec3(0.728295,0.441362,0.975949),
    vec3(0.718055,-0.222232,-0.993236),
    vec3(-0.506626,0.971953,-0.0905163),
    vec3(0.827423,0.228635,0.765675),
    vec3(-0.949529,0.11657,0.820418),
    vec3(-0.702247,-0.755467,0.197736),
    vec3(0.4907,0.799427,-0.688406),
    vec3(0.878157,0.799302,-0.769404),
    vec3(0.712792,-0.4301,-0.659245),
    vec3(0.792398,0.705842,-0.433231),
    vec3(0.878165,0.653158,-0.194927),
    vec3(0.854635,0.149474,0.739244),
    vec3(0.441711,0.617362,0.76881),
    vec3(-0.328897,-0.962774,-0.294071),
    vec3(0.629363,-0.987209,-0.765926),
    vec3(-0.314574,-0.875404,-0.507544),
    vec3(0.444697,-0.136415,0.90183),
    vec3(-0.731323,-0.693672,0.663743),
    vec3(0.498516,-0.879066,-0.97977),
    vec3(-0.672203,0.904742,-0.831506),
    vec3(-0.851583,-0.35156,0.818468),
    vec3(-0.976638,0.0263399,-0.396546),
    vec3(-0.935753,0.0798101,-0.819395),
    vec3(-0.70697,-0.764503,-0.809255),
    vec3(0.70545,0.262282,-0.700155),
    vec3(0.948443,-0.508006,0.718641),
    vec3(0.580819,0.141677,0.826628),
    vec3(0.107083,0.913124,0.9937),
    vec3(0.775478,-0.986916,-0.857926),
    vec3(0.486657,-0.870733,0.130607),
    vec3(0.86991,-0.210931,-0.447703),
    vec3(-0.618431,-0.688566,0.862223),
    vec3(-0.426895,-0.482835,0.986128),
    vec3(-0.878364,0.00768018,0.565753),
    vec3(0.24011,-0.637849,0.932106),
    vec3(-0.30621,-0.977891,0.440329),
    vec3(0.713558,0.672541,-0.807898),
    vec3(0.0824293,0.468542,-0.954561),
    vec3(0.445416,0.890427,-0.411189),
    vec3(-0.556869,-0.781332,0.478181),
    vec3(-0.542625,0.295305,-0.89932),
    vec3(-0.00497931,0.668378,0.898006),
    vec3(0.727422,-0.782028,-0.968711),
    vec3(0.85025,-0.843862,0.913426),
    vec3(-0.755622,0.905617,0.143231),
    vec3(0.804111,0.342332,-0.553619),
    vec3(-0.888048,-0.978643,0.199171),
    vec3(0.875102,-0.887314,0.333519),
    vec3(-0.960758,-0.965951,-0.694999),
    vec3(-0.95079,-0.129649,-0.995574),
    vec3(-0.804604,-0.652907,0.727736),
    vec3(-0.932849,-0.713688,-0.489725),
    vec3(-0.990841,-0.324019,0.118741),
    vec3(0.90695,0.533364,0.442608),
    vec3(0.833642,-0.784264,0.697418),
    vec3(-0.100915,0.973937,0.751061),
    vec3(0.60981,-0.798499,0.518776),
    vec3(0.323192,-0.455043,-0.834075),
    vec3(0.877116,-0.417661,-0.657904),
    vec3(0.883838,0.459451,-0.118731),
    vec3(0.821512,0.733774,0.687369),
    vec3(-0.830673,0.666727,0.136099),
    vec3(-0.485434,0.985814,-0.141205),
    vec3(-0.512853,-0.754259,0.412814),
    vec3(-0.054356,-0.993212,0.332675),
    vec3(-0.997399,-0.885296,-0.558646),
    vec3(-0.463848,-0.771403,-0.715032),
    vec3(0.197771,0.913389,-0.722702),
    vec3(0.794347,0.802116,0.910936),
    vec3(-0.557631,0.812309,0.87876),
    vec3(-0.127346,0.64798,-0.863286),
    vec3(0.362059,-0.652294,-0.991481),
    vec3(0.909357,0.482403,-0.947786),
    vec3(0.524829,-0.958209,0.923117),
    vec3(0.194132,-0.985303,0.674348),
    vec3(-0.988321,0.290258,-0.369657),
    vec3(-0.664425,0.781858,0.951938),
    vec3(-0.195133,0.733906,0.712754),
    vec3(-0.69602,0.706127,0.38068),
    vec3(0.808711,-0.848056,-0.115204),
    vec3(-0.792057,-0.641396,0.931694),
    vec3(-0.621694,-0.902523,-0.151663),
    vec3(-0.832809,-0.516997,-0.228445),
    vec3(0.99305,0.912833,-0.965322),
    vec3(0.637429,0.998386,0.871323),
    vec3(-0.605723,-0.62242,0.551557),
    vec3(-0.367161,-0.797774,-0.997603),
    vec3(0.370667,-0.704301,0.790002),
    vec3(0.34454,-0.928857,-0.603661),
    vec3(-0.486431,-0.855644,0.388808),
    vec3(0.631867,-0.980483,0.335183),
    vec3(-0.258928,0.89246,0.595416),
    vec3(-0.214631,0.583742,0.812886),
    vec3(-0.968865,-0.950289,0.215777),
    vec3(-0.586081,0.942999,0.257249),
    vec3(-0.884691,0.92798,-0.767763),
    vec3(-0.329064,0.95953,-0.256897),
    vec3(-0.218665,-0.934633,0.865796),
    vec3(0.598789,-0.453567,-0.663659),
    vec3(-0.129919,-0.826604,-0.737771),
    vec3(-0.978042,0.744098,0.229254),
    vec3(-0.877197,0.557422,0.138716),
    vec3(0.692746,-0.437423,0.94215),
    vec3(0.493234,0.845049,-0.442249),
    vec3(0.699593,-0.526139,-0.601094),
    vec3(-0.819306,-0.892555,-0.654791),
    vec3(0.766196,-0.489476,0.851589),
    vec3(0.822134,-0.933272,0.717141),
    vec3(0.338245,0.399268,0.925413),
    vec3(-0.540228,-0.846143,0.450365),
    vec3(0.419069,0.976879,-0.255247),
    vec3(0.451376,0.646249,-0.878787),
    vec3(-0.780277,-0.843689,0.504456),
    vec3(0.377346,0.945302,0.0460882),
    vec3(0.823295,0.621102,0.700715),
    vec3(-0.896027,0.278552,0.974774),
    vec3(-0.822668,-0.622427,-0.489259),
    vec3(-0.563017,-0.877942,-0.276385),
    vec3(0.870761,-0.704688,0.782603),
    vec3(0.816205,-0.734524,-0.0478405),
    vec3(-0.892274,0.130904,-0.93412),
    vec3(-0.848065,0.914404,0.949672),
    vec3(0.990432,-0.635779,0.517533),
    vec3(-0.315333,-0.626857,0.713052),
    vec3(-0.608404,-0.638628,0.562291),
    vec3(0.481245,0.984718,-0.67921),
    vec3(0.89265,0.54137,-0.921631),
    vec3(0.988486,0.836421,0.0356911),
    vec3(0.362813,0.709703,0.937049),
    vec3(0.357882,-0.587221,0.924808),
    vec3(0.990962,0.218179,0.513261),
    vec3(-0.100122,0.924863,0.892643),
    vec3(0.92774,-0.609963,0.0701342),
    vec3(0.603422,-0.768748,0.863737),
    vec3(-0.391302,-0.946328,-0.897103),
    vec3(0.29714,0.160384,-0.994927),
    vec3(0.601842,-0.82822,-0.966651),
    vec3(0.62017,-0.714981,-0.804879),
    vec3(-0.660782,-0.715954,0.32353),
    vec3(-0.609857,0.799461,-0.603556),
    vec3(-0.956295,-0.346321,0.98978),
    vec3(-0.37126,-0.192061,0.957953),
    vec3(0.93785,0.103281,-0.641537),
    vec3(0.796888,0.524656,0.627954),
    vec3(-0.946196,-0.141523,0.654472),
    vec3(-0.957045,0.803982,0.552839),
    vec3(0.0856262,-0.442729,0.908206),
    vec3(-0.857531,0.973096,-0.377781),
    vec3(0.1218,-0.981335,0.574155),
    vec3(0.285483,0.868613,0.830052),
    vec3(0.535653,-0.997162,0.834428),
    vec3(-0.58306,-0.522142,-0.939229),
    vec3(-0.982705,0.688943,-0.745468),
    vec3(-0.717397,0.454159,-0.961099),
    vec3(-0.901574,-0.924919,-0.12689),
    vec3(-0.883495,-0.900736,-0.489796),
    vec3(0.714426,-0.447797,0.682738),
    vec3(-0.430459,0.927224,0.217682),
    vec3(0.655371,-0.547583,-0.692453),
    vec3(-0.564674,0.834672,0.63762),
    vec3(-0.320363,0.155478,-0.95256),
    vec3(0.605931,-0.875118,-0.344117),
    vec3(-0.255171,0.998956,-0.258567),
    vec3(-0.745926,0.955862,0.961956),
    vec3(0.214865,0.963805,-0.952735),
    vec3(-0.311233,-0.778381,0.762492),
    vec3(-0.751948,-0.865223,0.912392),
    vec3(-0.913219,-0.507061,0.713793),
    vec3(-0.433464,-0.835713,0.957971),
    vec3(0.519911,-0.732439,0.501899),
    vec3(0.842302,0.221738,-0.616134),
    vec3(-0.613132,-0.64739,0.799966),
    vec3(0.669558,-0.68856,0.981538),
    vec3(0.558607,0.477121,-0.837456),
    vec3(-0.865555,0.783735,0.610225),
    vec3(-0.828444,0.901581,-0.263496),
    vec3(-0.686996,-0.349169,0.662259),
    vec3(0.864367,-0.477079,0.236201),
    vec3(0.31261,0.670177,0.987665),
    vec3(0.165037,0.922482,0.790847),
    vec3(-0.930269,-0.726372,0.709852),
    vec3(0.0830268,0.77084,-0.908874),
    vec3(-0.927236,-0.728407,-0.184538),
    vec3(-0.712183,0.678493,-0.690342),
    vec3(-0.751082,-0.196418,0.835055),
    vec3(0.832215,-0.810742,0.438152),
    vec3(-0.694046,-0.474072,-0.742469),
    vec3(-0.446681,0.983407,-0.20084),
    vec3(0.96091,-0.0951084,0.510441),
    vec3(-0.897128,0.958579,0.0571182),
    vec3(-0.811028,0.513751,-0.505927),
    vec3(-0.468873,0.976554,0.302151),
    vec3(-0.18097,-0.79951,0.858969),
    vec3(-0.433767,-0.999317,0.896458),
    vec3(0.987067,-0.561433,-0.759324),
    vec3(0.105144,-0.998744,0.664667),
    vec3(0.241361,0.915086,-0.418689),
    vec3(0.245606,0.985001,-0.306637),
    vec3(-0.783975,0.644788,0.508253),
    vec3(-0.171142,-0.680411,-0.949699),
    vec3(-0.265428,-0.929378,0.562748),
    vec3(-0.350024,0.489736,-0.889334),
    vec3(-0.514793,0.546655,0.784534),
    vec3(0.0404774,-0.425831,0.953318),
    vec3(-0.897372,-0.858259,0.854976),
    vec3(0.676812,-0.438155,-0.674202),
    vec3(0.998659,0.200922,0.00440121),
    vec3(-0.572679,-0.569823,-0.905845),
    vec3(-0.540795,-0.846925,-0.332664),
    vec3(-0.281431,0.87224,-0.632362),
    vec3(-0.988331,-0.377009,0.880673),
    vec3(0.916813,0.220614,0.577036),
    vec3(-0.534037,-0.888255,0.602152),
    vec3(-0.773436,0.864937,-0.838528),
    vec3(-0.99697,0.724115,0.798267),
    vec3(0.982376,0.483574,0.229479),
    vec3(-0.55286,-0.592602,0.941939),
    vec3(0.351723,0.924998,0.654418),
    vec3(-0.488906,-0.502101,0.876486),
    vec3(-0.789862,0.676938,0.601045),
    vec3(0.957959,0.642884,0.532905),
    vec3(0.78309,0.484939,-0.819346),
    vec3(0.145943,-0.770647,0.912689),
    vec3(0.0974464,0.699444,-0.751804),
    vec3(-0.828195,-0.0394798,0.926937),
    vec3(0.00353348,0.809333,0.907923),
    vec3(-0.122021,0.99025,0.768778),
    vec3(-0.936069,0.563445,0.388247),
    vec3(0.239632,-0.866136,-0.70307),
    vec3(-0.96119,-0.324376,0.672076),
    vec3(0.974975,0.757155,0.596972),
    vec3(0.944611,0.558995,0.94741),
    vec3(-0.196233,-0.786566,0.720198),
    vec3(0.118955,-0.430772,0.970473),
    vec3(0.647017,0.867184,-0.402109),
    vec3(-0.237936,0.278062,0.982085),
    vec3(-0.963812,-0.209267,-0.863238),
    vec3(-0.195297,0.757265,0.984351),
    vec3(0.935368,0.317713,0.764539),
    vec3(0.990764,-0.578487,0.802696),
    vec3(-0.927772,0.958406,-0.783127),
    vec3(0.923929,0.403917,0.134289),
    vec3(0.907553,0.492211,0.573857),
    vec3(0.962057,-0.480211,0.258801),
    vec3(0.0804081,0.491301,0.923988),
    vec3(-0.872271,-0.881939,0.842059),
    vec3(-0.339595,-0.876862,0.780072),
    vec3(0.79428,-0.540598,0.541474),
    vec3(-0.378155,0.674559,-0.772103),
    vec3(-0.950326,-0.449137,0.215569),
    vec3(0.760133,0.97968,-0.43636),
    vec3(0.957128,-0.0539855,-0.772139),
    vec3(-0.0675963,0.696995,-0.898707),
    vec3(-0.539402,-0.897155,0.26041),
    vec3(0.900392,-0.18454,0.543065),
    vec3(0.585507,-0.0982345,-0.841583),
    vec3(-0.895616,0.234584,0.744471),
    vec3(0.917067,-0.418999,-0.080716),
    vec3(-0.731189,0.503389,0.888896),
    vec3(0.883636,-0.859389,-0.263298),
    vec3(-0.149953,-0.965655,0.334133),
    vec3(-0.535361,0.0774931,-0.912396),
    vec3(-0.257194,-0.811023,0.847766),
    vec3(-0.971276,0.229591,0.755148),
    vec3(0.852589,-0.54753,-0.64017),
    vec3(-0.350056,-0.863639,-0.726097),
    vec3(-0.888095,-0.797918,0.729244),
    vec3(-0.487628,0.912869,0.604759),
    vec3(-0.829204,-0.797833,-0.110916),
    vec3(-0.347655,-0.88532,0.655603),
    vec3(0.893633,0.454113,-0.309384),
    vec3(-0.852809,-0.642255,0.907626),
    vec3(0.387564,-0.585936,-0.942216),
    vec3(0.828376,-0.341067,0.550056),
    vec3(0.96121,0.565101,-0.334781),
    vec3(0.704498,0.695821,0.711138),
    vec3(-0.458337,-0.946217,0.569709),
    vec3(-0.571,-0.544379,0.779154),
    vec3(0.659124,0.66586,-0.357954),
    vec3(0.592516,0.795923,0.398267),
    vec3(0.652563,-0.116822,-0.901588),
    vec3(0.807329,0.570304,0.350751),
    vec3(0.945173,0.817052,0.205421),
    vec3(-0.924851,0.379276,0.197219),
    vec3(-0.752998,-0.198297,-0.736339),
    vec3(-0.537614,-0.618194,-0.759855),
    vec3(-0.270319,-0.853277,0.644546),
    vec3(0.702951,0.780247,0.471938),
    vec3(0.348736,0.951915,-0.966259),
    vec3(-0.347511,0.870117,-0.927149),
    vec3(0.823882,0.946027,-0.26303),
    vec3(-0.729044,-0.64665,0.831531),
    vec3(0.738699,-0.335764,0.920176),
    vec3(-0.000702441,-0.832806,0.79496),
    vec3(0.870437,0.230577,0.521276),
    vec3(-0.935854,0.997629,0.0557654),
    vec3(0.875354,0.489451,0.162982),
    vec3(0.622391,-0.904425,-0.384906),
    vec3(-0.958764,0.553176,-0.892045),
    vec3(0.809972,0.592491,-0.687094),
    vec3(-0.859573,-0.9014,0.235701),
    vec3(-0.407497,-0.861442,0.328806),
    vec3(0.577783,0.383603,-0.727985),
    vec3(-0.81352,-0.815203,0.126571),
    vec3(-0.545981,-0.790356,-0.473265),
    vec3(-0.871058,0.467484,-0.386495),
    vec3(0.928584,-0.479268,-0.960471),
    vec3(-0.558013,0.940746,-0.660009),
    vec3(-0.0651799,0.716348,-0.752279),
    vec3(-0.770498,0.313388,0.676174),
    vec3(0.456888,-0.537509,0.796753),
    vec3(-0.489145,-0.549476,0.876632),
    vec3(-0.464505,-0.00229818,0.90951),
    vec3(0.166553,-0.499831,-0.962826),
    vec3(-0.862835,0.67621,0.855345),
    vec3(0.293042,-0.401199,-0.991965),
    vec3(-0.578701,0.201678,0.850729),
    vec3(0.0315313,0.824162,-0.775075),
    vec3(0.909106,0.675681,-0.695217),
    vec3(-0.804287,-0.444778,0.435284),
    vec3(-0.605442,0.185867,0.948383),
    vec3(0.823735,-0.77763,-0.21891),
    vec3(0.457791,-0.816256,0.981678),
    vec3(0.187655,-0.735201,-0.788878),
    vec3(0.746909,-0.434545,0.816597),
    vec3(-0.998683,-0.402046,-0.689557),
    vec3(0.49669,-0.915493,-0.0923093),
    vec3(-0.738052,0.648137,0.809444),
    vec3(-0.630185,0.667458,-0.402383),
    vec3(0.83576,0.229609,0.600937),
    vec3(-0.834613,-0.725393,0.0489767),
    vec3(-0.669523,-0.652856,-0.728646),
    vec3(-0.884179,-0.571109,0.165552),
    vec3(0.978372,0.975183,0.0398645),
    vec3(-0.976246,-0.0201697,0.879278),
    vec3(-0.913131,-0.930447,0.843188),
    vec3(0.602883,-0.742397,-0.414337),
    vec3(0.841707,-0.306996,-0.662255),
    vec3(0.0222127,0.640867,-0.833368),
    vec3(0.0494803,-0.902873,0.478959),
    vec3(0.497602,-0.752613,0.585226),
    vec3(0.275795,-0.787651,0.641993),
    vec3(-0.631118,-0.96776,-0.490915),
    vec3(0.679499,0.890175,-0.336021),
    vec3(-0.646963,0.67764,0.65643),
    vec3(-0.911842,-0.326743,0.759767),
    vec3(-0.202013,0.589008,0.959315),
    vec3(-0.505952,0.607442,0.789001),
    vec3(-0.833688,-0.736609,0.742644),
    vec3(0.506401,0.423876,-0.939222),
    vec3(0.858339,-0.961341,-0.488076),
    vec3(0.924208,0.40506,-0.469298),
    vec3(0.0444648,0.849294,-0.562012),
    vec3(0.735845,-0.133155,0.981544),
    vec3(-0.859101,-0.866459,0.482608),
    vec3(-0.988694,-0.274195,-0.675351),
    vec3(0.276574,0.54297,0.920429),
    vec3(-0.858532,-0.886374,0.608886),
    vec3(-0.65169,0.76633,0.171494),
    vec3(-0.596082,0.834113,0.479866),
    vec3(0.774061,-0.679137,0.516389),
    vec3(-0.567808,-0.862404,0.0916406),
    vec3(0.711544,0.923531,0.222474),
    vec3(0.832588,0.341594,0.88967),
    vec3(-0.596435,0.775722,0.249201),
    vec3(0.797597,-0.223674,0.685899),
    vec3(0.0378658,0.878006,-0.813045),
    vec3(-0.997284,0.922849,0.63087),
    vec3(-0.191804,-0.993819,0.389348),
    vec3(-0.478545,0.594304,-0.825062),
    vec3(0.549693,-0.954403,0.412204),
    vec3(0.944847,0.0827079,-0.545225),
    vec3(-0.403001,-0.983711,0.852338),
    vec3(0.713313,-0.8636,0.0155979),
    vec3(0.263329,-0.231373,-0.990226),
    vec3(0.899413,-0.742904,-0.0527641),
    vec3(-0.926193,-0.833005,-0.931182),
    vec3(-0.0617989,-0.853531,0.755268),
    vec3(0.987816,-0.125163,-0.942486),
    vec3(-0.828896,0.187245,-0.541062),
    vec3(-0.484602,-0.865233,-0.481457),
    vec3(-0.533665,0.690533,0.776782),
    vec3(-0.28093,0.723191,-0.9728),
    vec3(0.745626,-0.757217,0.42347),
    vec3(-0.543614,0.876004,0.790183),
    vec3(-0.668789,0.961126,0.00154519),
    vec3(0.792819,-0.60854,0.289588),
    vec3(0.245761,0.0648078,-0.971814),
    vec3(-0.988602,-0.511654,-0.069439),
    vec3(-0.979645,-0.827679,-0.142079),
    vec3(-0.809107,-0.519556,0.91595),
    vec3(-0.506117,-0.768061,0.77247),
    vec3(0.19063,-0.98217,0.934472),
    vec3(-0.719001,-0.330202,0.62984),
    vec3(0.116733,0.759733,-0.682289),
    vec3(0.335364,0.967828,0.170363),
    vec3(-0.646853,0.503859,-0.771197),
    vec3(0.300919,-0.808637,-0.516426),
    vec3(0.944178,0.867939,-0.831259),
    vec3(-0.852458,-0.93708,0.397044),
    vec3(0.671427,0.443141,0.670809),
    vec3(0.108725,-0.900285,0.701532),
    vec3(-0.89773,-0.357054,0.993365),
    vec3(0.202798,-0.774874,0.612934),
    vec3(-0.90087,0.310497,0.59837),
    vec3(0.862615,0.945704,0.906086),
    vec3(0.545291,-0.402072,0.965701),
    vec3(0.773128,0.865395,-0.48778),
    vec3(-0.803325,-0.571245,0.631974),
    vec3(0.798313,0.404573,-0.944742),
    vec3(-0.545668,0.799871,0.444941),
    vec3(-0.759601,0.683977,0.0482121),
    vec3(-0.887581,-0.644412,-0.0115886),
    vec3(0.662719,-0.883017,0.412215),
    vec3(-0.491679,-0.930332,0.305807),
    vec3(0.914224,0.7969,0.515677),
    vec3(0.945217,-0.567057,0.546904),
    vec3(0.44618,0.82443,0.572401),
    vec3(-0.0177084,0.944647,-0.951945),
    vec3(-0.555769,-0.443466,0.862278),
    vec3(0.886069,-0.658194,0.461601),
    vec3(0.277182,-0.592647,-0.962801),
    vec3(-0.802547,-0.133409,0.748447),
    vec3(-0.613595,0.628379,-0.649521),
    vec3(0.648067,0.889568,-0.213547),
    vec3(0.820713,0.918761,0.919853),
    vec3(0.616724,0.896005,0.328171),
    vec3(-0.462575,-0.576282,-0.880717),
    vec3(0.531947,0.97336,-0.0719213),
    vec3(-0.857299,-0.573459,-0.373332),
    vec3(-0.940664,0.732947,-0.234124),
    vec3(0.95169,0.210857,-0.333255),
    vec3(0.982406,0.406277,0.652613),
    vec3(0.478044,0.46744,0.850874),
    vec3(0.876615,0.13486,-0.608393),
    vec3(0.648999,0.714694,0.937555),
    vec3(-0.610372,0.919219,0.730828),
    vec3(0.780166,-0.0468506,0.649673),
    vec3(-0.970292,0.640385,0.82378),
    vec3(-0.665357,-0.686612,0.546407),
    vec3(0.497595,-0.880618,0.209999),
    vec3(-0.384995,-0.780735,-0.663748),
    vec3(0.155157,0.970493,0.888663),
    vec3(-0.326144,-0.734771,-0.931208),
    vec3(-0.963129,0.674013,0.82299),
    vec3(-0.592569,-0.926332,0.666697),
    vec3(-0.758,-0.568899,0.749885),
    vec3(-0.56427,0.948017,0.799552),
    vec3(0.766961,-0.846042,0.890383),
    vec3(0.740951,0.653357,-0.735429),
    vec3(0.729605,0.810839,-0.469397),
    vec3(0.783768,0.788471,-0.916815),
    vec3(-0.861265,-0.753206,0.556721),
    vec3(-0.933865,-0.442431,-0.94592),
    vec3(0.869419,-0.607207,0.797095),
    vec3(0.737491,0.79942,-0.274886),
    vec3(0.192536,-0.99133,-0.54428),
    vec3(0.0696634,0.953578,-0.546721),
    vec3(-0.885618,-0.42103,0.848903),
    vec3(-0.830059,0.0328325,-0.863258),
    vec3(-0.708652,-0.863321,-0.167082),
    vec3(-0.292722,-0.791468,0.797879),
    vec3(-0.676695,-0.759644,-0.296281),
    vec3(-0.715321,-0.931336,-0.916158),
    vec3(-0.443616,-0.846814,0.480935),
    vec3(0.931705,0.257387,0.847002),
    vec3(-0.907781,0.750827,0.259446),
    vec3(-0.717328,-0.8604,-0.064966),
    vec3(-0.903458,-0.863731,0.215782),
    vec3(-0.221437,-0.538505,0.871951),
    vec3(0.980278,-0.76571,-0.966067),
    vec3(-0.141829,0.678507,-0.925952),
    vec3(-0.569661,-0.0820634,0.940289),
    vec3(0.302737,0.963859,-0.00871158),
    vec3(-0.938138,0.487412,-0.948535),
    vec3(-0.115138,-0.641262,0.826234),
    vec3(0.810317,-0.800694,-0.781278),
    vec3(0.728509,-0.0578637,0.999585),
    vec3(-0.489578,-0.926245,-0.24813),
    vec3(0.995232,0.695409,0.0893649),
    vec3(-0.859557,0.268858,0.747024),
    vec3(0.128522,-0.782306,0.845427),
    vec3(0.441447,0.931748,-0.324311),
    vec3(-0.735789,-0.972689,-0.99594),
    vec3(0.84537,-0.580774,-0.25188),
    vec3(0.513457,0.0929593,0.880432),
    vec3(0.963987,0.689386,0.901675),
    vec3(0.884227,0.0271262,-0.859915),
    vec3(-0.0883126,-0.457492,0.98518),
    vec3(-0.863088,-0.147918,-0.971386),
    vec3(-0.613501,-0.627444,-0.57357),
    vec3(0.752983,0.665509,-0.599204),
    vec3(0.831449,0.658162,-0.0923669),
    vec3(0.783069,-0.57343,0.893941),
    vec3(-0.714474,0.873148,0.175641),
    vec3(-0.494327,-0.895553,0.496359),
    vec3(-0.661603,0.694293,-0.744842),
    vec3(0.257905,-0.998001,0.312414),
    vec3(0.811826,-0.680262,0.958668),
    vec3(-0.964159,0.555451,0.333677),
    vec3(0.951708,0.457805,0.904251),
    vec3(-0.715517,-0.938171,0.676594),
    vec3(0.725444,0.938075,-0.0122363),
    vec3(-0.549577,-0.514248,0.868237),
    vec3(0.627182,0.82505,0.66854),
    vec3(-0.995723,0.257946,-0.269752),
    vec3(-0.240552,0.851296,-0.995524),
    vec3(0.0569949,0.963458,-0.559647),
    vec3(-0.433112,-0.800097,0.699364),
    vec3(0.973854,0.778939,-0.283751),
    vec3(0.599063,-0.832027,0.533316),
    vec3(-0.613551,-0.831154,-0.34386),
    vec3(0.601246,-0.991147,0.062508),
    vec3(0.848479,0.477646,-0.508341),
    vec3(-0.716351,-0.708389,0.568262),
    vec3(0.280388,-0.613602,0.810661),
    vec3(-0.839879,-0.674121,-0.0203627),
    vec3(0.863232,0.550759,0.131821),
    vec3(-0.678562,-0.361397,-0.668217),
    vec3(0.77044,-0.469028,0.821604),
    vec3(-0.64232,0.756113,0.85162),
    vec3(-0.874381,0.0350823,0.73754),
    vec3(0.826365,-0.975243,0.254011),
    vec3(-0.830006,-0.686442,0.20069),
    vec3(-0.382143,0.844716,0.768444),
    vec3(0.0540498,0.995104,-0.892804),
    vec3(0.506516,-0.762293,0.495327),
    vec3(-0.595776,-0.511808,0.651546),
    vec3(0.425294,0.790516,0.768845),
    vec3(-0.840083,0.534487,-0.595388),
    vec3(0.370577,0.849676,-0.900276),
    vec3(0.954511,0.133846,0.493369),
    vec3(0.754939,0.510839,-0.479589),
    vec3(-0.591015,0.705209,0.58129),
    vec3(0.602345,-0.428555,-0.895029),
    vec3(0.988762,0.357137,-0.574625),
    vec3(-0.816884,-0.446281,0.892018),
    vec3(-0.74595,0.816877,0.833118),
    vec3(0.701228,0.434884,-0.845025),
    vec3(-0.829007,-0.710946,-0.312281),
    vec3(0.812832,0.995104,-0.850341),
    vec3(0.981022,-0.683268,0.0346882),
    vec3(0.755891,-0.546931,0.711989),
    vec3(0.740093,-0.870718,0.804379),
    vec3(0.662337,0.622635,0.460577),
    vec3(-0.361864,0.985844,-0.240789),
    vec3(0.736045,0.972102,0.814819),
    vec3(0.853542,-0.852316,-0.337294),
    vec3(0.963192,-0.400161,-0.758984),
    vec3(0.325822,-0.00640118,0.94834),
    vec3(-0.892337,0.550269,-0.955173),
    vec3(-0.902298,-0.718252,-0.605183),
    vec3(-0.0683599,-0.703737,0.786949),
    vec3(-0.74845,0.121714,0.74086),
    vec3(-0.963915,0.311222,0.455067),
    vec3(0.24085,0.751452,0.876401),
    vec3(0.140751,-0.9455,0.437769),
    vec3(0.220184,0.763573,0.752369),
    vec3(-0.892351,0.944683,0.0398337),
    vec3(-0.770672,0.724375,0.0915494),
    vec3(0.869884,0.133722,-0.958427),
    vec3(0.222551,-0.843543,0.959051),
    vec3(-0.7001,0.476514,-0.687197),
    vec3(0.908489,0.482715,-0.923997),
    vec3(-0.876475,0.484745,-0.655169),
    vec3(0.0267279,-0.994419,0.874899),
    vec3(0.593018,-0.51819,0.718208),
    vec3(0.517948,-0.86347,-0.480069),
    vec3(0.776096,0.986686,0.0920775),
    vec3(-0.495447,-0.779903,0.879662),
    vec3(-0.810385,-0.556371,-0.477648),
    vec3(0.519664,0.841709,-0.516255),
    vec3(-0.0743455,-0.418149,0.935995),
    vec3(-0.987784,0.0348732,-0.445123),
    vec3(0.873367,0.962982,-0.514967),
    vec3(0.543155,0.72038,0.984071),
    vec3(0.888137,0.129992,0.893617),
    vec3(-0.460377,-0.900631,-0.0207612),
    vec3(-0.644024,0.97948,-0.3491),
    vec3(0.723313,0.283314,-0.632649),
    vec3(0.37385,-0.934735,0.870447),
    vec3(-0.966906,0.288733,0.241628),
    vec3(0.90441,0.676911,-0.661524),
    vec3(-0.681147,0.830953,0.824527),
    vec3(-0.0349868,0.887587,0.791193),
    vec3(0.820438,-0.11452,0.859428),
    vec3(-0.288156,0.897673,-0.736105),
    vec3(-0.957521,-0.50114,0.771042),
    vec3(-0.238661,0.688161,0.919567),
    vec3(-0.97096,-0.0232407,0.830032),
    vec3(-0.594768,-0.936893,0.458072),
    vec3(0.828299,-0.567448,-0.833332),
    vec3(0.186472,-0.316648,0.952669),
    vec3(0.79194,-0.276947,0.935406),
    vec3(0.514353,-0.619949,-0.946781),
    vec3(0.423527,-0.674007,-0.996401),
    vec3(-0.735562,0.735454,-0.63019),
    vec3(-0.921954,0.725769,-0.763384),
    vec3(0.441157,-0.984985,0.592026),
    vec3(0.892041,0.60839,0.377867),
    vec3(-0.290861,-0.812662,-0.773447),
    vec3(-0.891405,0.806098,-0.297803),
    vec3(-0.675047,-0.0831925,0.985857),
    vec3(0.907681,-0.772867,0.391225),
    vec3(0.217923,-0.657465,-0.891622),
    vec3(0.559554,0.554465,-0.750379),
    vec3(-0.9445,0.806198,0.0221282),
    vec3(-0.326907,0.980771,0.646652),
    vec3(0.961715,-0.652234,-0.196728),
    vec3(-0.294361,-0.712098,0.814916),
    vec3(-0.324261,0.812849,0.701215),
    vec3(-0.95346,-0.449607,0.808271),
    vec3(0.603824,-0.690303,-0.987978),
    vec3(-0.642344,0.716322,0.336172),
    vec3(0.611645,0.100991,0.972519),
    vec3(0.192043,-0.549358,0.91975),
    vec3(0.771849,0.624523,0.969065),
    vec3(-0.0977524,-0.70028,-0.93074),
    vec3(-0.860954,-0.972411,-0.34224),
    vec3(0.481687,-0.506519,0.851737),
    vec3(0.0201994,0.988489,0.893832),
    vec3(-0.905332,0.583758,0.0332068),
    vec3(0.698397,-0.711182,-0.095653),
    vec3(0.743224,-0.219138,-0.704478),
    vec3(0.952877,0.565879,0.476753),
    vec3(-0.585684,-0.944159,-0.140169),
    vec3(-0.24958,0.622316,-0.77826),
    vec3(0.0750594,-0.340192,-0.993734),
    vec3(0.634238,0.898021,-0.31579),
    vec3(0.714147,-0.759474,0.817059)
};
#endif
const int SampleCount = 16;

void main()
{
    vec3 origin = vec3(vec2(1.0, 1.0) - inData.texcoord, -1.0);
    vec3 direction = vec3(0.0, 0.0, 1.0);

    MoRay ray;
    moInitRay(ray, origin, direction);
    for (int i = 0; i < 5; ++i)
    {
        moInitRay(ray, MultiTexels[i] + origin, direction);

        MoIntersectResult result;
        if (moIntersectUVTriangleBVH(ray, result))
        {
            vec3 surfacePoint, surfaceNormal;
            moGetSurface(result.triangle, moGetUVBarycentric(result.triangle, origin.xy), surfacePoint, surfaceNormal);
//#define COMPUTE_NORMALS
#ifdef COMPUTE_NORMALS
            fragment = vec4(surfaceNormal / 2.0 + vec3(0.5, 0.5, 0.5f), 1.0);
#else
            float value = 0.f;
            for (int j = 0; j < SampleCount; ++j)
            {
                vec3 nextDirection = normalize(Samples[j]);
                float diffuseFactor = dot(surfaceNormal, nextDirection);
                if (diffuseFactor > 0.f)
                {
                    moInitRay(ray, surfacePoint + surfaceNormal * SurfaceBias, nextDirection);

                    MoIntersectResult nextResult;
                    if (moIntersectTriangleBVH(ray, nextResult) && nextResult.distance < 1.0 /*lightSourceDistance*/)
                    {
                        // light is occluded
                    }
                    else
                    {
                        value += diffuseFactor * 1.0 * 1.3 * 2.0 /*white point*/ /*lightSourcePower*/;
                    }
                }
            }
            fragment = vec4(vec3(value / SampleCount), 1.0);
#endif
            break;
        }
        else
        {
            fragment = DefaultColor;
        }
    }
}
#endif
